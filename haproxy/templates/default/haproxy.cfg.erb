global
  log 127.0.0.1   local0
  log 127.0.0.1   local1 notice
  #log loghost    local0 info
  maxconn <%= node[:haproxy][:global_max_connections] %>
  #debug
  #quiet
  user haproxy
  group haproxy
  <% if node[:haproxy][:stats_socket_level] %>
  stats socket <%= node[:haproxy][:stats_socket_path] %> level <%= node[:haproxy][:stats_socket_level] %>
  <% else %>
  stats socket <%= node[:haproxy][:stats_socket_path] %>
  <% end %>

defaults
  log             global
  mode            http
  option          httplog
  option          dontlognull
  retries         <%= node[:haproxy][:retries] %>
  option          redispatch
  maxconn        <%= node[:haproxy][:default_max_connections] %>
  timeout client <%= node[:haproxy][:client_timeout] %>             # Client and server timeout must match the longest
  timeout server <%= node[:haproxy][:server_timeout] %>             # time we may wait for a response from the server.
  timeout queue  <%= node[:haproxy][:queue_timeout] %>              # Don't queue requests too long if saturated.
  timeout connect <%= node[:haproxy][:connect_timeout] %>           # There's no reason to change this one.
  timeout http-request <%= node[:haproxy][:http_request_timeout] %>	# A complete request may never take that long.
  <% if node[:haproxy][:httpclose] %>
  option          httpclose                                         # disable keepalive (HAProxy does not yet support the HTTP keep-alive mode)
  <% end %>
  <% if node[:haproxy][:http_server_close] %>
  option          http-server-close                                 # enable HTTP connection closing on the server side
  <% end %>
  option          abortonclose                                      # enable early dropping of aborted requests from pending queue
  option          httpchk                                           # enable HTTP protocol to check on servers health
  <% if node[:haproxy][:enable_stats] -%>
  stats auth <%= node[:haproxy][:stats_user] %>:<%= node[:haproxy][:stats_password] %>
  stats uri <%= node[:haproxy][:stats_url] %>
  <% end -%>
        
# Set up application listeners here.
<% if !node[:haproxy][:php_backends].empty? -%>  
backend php_app_servers
  balance <%= node[:haproxy][:balance] %>
  option redispatch
  option forwardfor
  option httpchk <%= node[:haproxy][:health_check_method] %> <%= node[:haproxy][:health_check_url] %>
  <% node[:haproxy][:php_backends].each do |backend| -%>
  server <%= backend['name'] %> <%= backend['ip'] %>:80 weight <%= backend['backends'] || 10 %> maxconn <%= backend['backends'] * node[:haproxy][:maxcon_factor_php_app] %> check inter <%= node[:haproxy][:check_interval] %>
  <% end -%>  
<% end -%>

<% if !node[:haproxy][:php_backends].empty? -%>  
backend php_app_servers_ssl
  mode tcp
  balance <%= node[:haproxy][:balance] %>
  option redispatch
  option ssl-hello-chk
  <% node[:haproxy][:php_backends].each do |backend| -%>
  server <%= backend['name'] %> <%= backend['ip'] %>:443 weight <%= backend['backends'] || 10 %> maxconn <%= backend['backends'] * node[:haproxy][:maxcon_factor_php_app_ssl] %> check inter <%= node[:haproxy][:check_interval] %>
  <% end -%>  
<% end -%>

<% if !node[:opsworks][:layers][:labview_backends][:instances].empty? -%>
backend labview_servers
  balance <%= node[:haproxy][:balance] %>
  option redispatch
  option forwardfor
  option httpchk <%= node[:haproxy][:health_check_method] %> <%= node[:haproxy][:health_check_url] %>
  cookie SERVERID insert indirect nocache
  <% node[:opsworks][:layers][:labview_backends][:instances].each do |name,backend| -%>
  server <%= name %> <%= backend['ip'] %>:80 weight <%= backend['backends'] || 10 %> maxconn <%= backend['backends'] * node[:haproxy][:maxcon_factor_java_app] %> check inter <%= node[:haproxy][:check_interval] %>
  <% end -%>
<% end -%>

<% if !node[:opsworks][:layers][:labview_backends][:instances].empty? -%>
backend labview_servers_ssl
  mode tcp
  balance <%= node[:haproxy][:balance] %>
  option redispatch
  option ssl-hello-chk
  cookie SERVERID insert indirect nocache
  <% node[:opsworks][:layers][:labview_backends][:instances].each do |name,backend| -%>
  server <%= name %> <%= backend['ip'] %>:443 weight <%= backend['backends'] || 10 %> maxconn <%= backend['backends'] * node[:haproxy][:maxcon_factor_java_app_ssl] %> check inter <%= node[:haproxy][:check_interval] %>
  <% end -%>
<% end -%>
  
<% if !node[:opsworks][:layers][:guacamole][:instances].empty? -%>
backend guacamole_servers
  balance <%= node[:haproxy][:balance] %>
  option redispatch
  option forwardfor
  option httpchk <%= node[:haproxy][:health_check_method] %> <%= node[:haproxy][:health_check_url] %>
  cookie SERVERID insert indirect nocache
  <% node[:opsworks][:layers][:guacamole][:instances].each do |name,backend| -%>
  server <%= name %> <%= backend['ip'] %>:80 weight <%= backend['backends'] || 10 %> maxconn <%= backend['backends'] * node[:haproxy][:maxcon_factor_java_app] %> check inter <%= node[:haproxy][:check_interval] %>
  <% end -%>
<% end -%>

<% if !node[:opsworks][:layers][:guacamole][:instances].empty? -%>
backend guacamole_servers_ssl
  mode tcp
  balance <%= node[:haproxy][:balance] %>
  option redispatch
  option ssl-hello-chk
  cookie SERVERID insert indirect nocache
  <% node[:opsworks][:layers][:guacamole][:instances].each do |name,backend| -%>
  server <%= name %> <%= backend['ip'] %>:443 weight <%= backend['backends'] || 10 %> maxconn <%= backend['backends'] * node[:haproxy][:maxcon_factor_java_app_ssl] %> check inter <%= node[:haproxy][:check_interval] %>
  <% end -%>
<% end -%>
frontend http-in
  bind :80

  acl guacamole_path path_beg -i /guacamole

  # all domains of PHP applications
  <% node[:haproxy][:php_applications].each do |app_name, app_config| -%>
    <% app_config['domains'].each do |domain| -%>
  acl php_application_<%= app_name %>_domain_<%= domain.gsub(/[^\w.:-]/, '_') %> hdr_end(host) -i <%= domain %>
      <% if app_config['mounted_at'] -%>
  acl php_application_<%= app_name %>_domain_<%= domain.gsub(/[^\w.:-]/, '_') %>_path path_beg <%= app_config['mounted_at'] %>
      <% end -%>
    <% end -%>
  <% end -%>

  <% unless node[:opsworks][:layers][:guacamole][:instances].empty? -%>
  use_backend guacamole_servers if guacamole_path
  <% end -%>
    
  default_backend labview_servers

frontend https-in
  mode tcp
  bind :443

  acl guacamole_path path_beg -i /guacamole

  # all domains of PHP applications
  <% node[:haproxy][:php_applications].each do |app_name, app_config| -%>
    <% app_config['domains'].each do |domain| -%>
  acl php_applications_ssl hdr_end(host) -i <%= domain %>
    <% end -%>
  <% end -%>
  <% unless node[:haproxy][:php_applications].empty? || node[:haproxy][:php_backends].empty? -%>
  use_backend php_app_servers_ssl if php_applications_ssl
  <% end -%>
  <% unless node[:opsworks][:layers][:guacamole][:instances].empty? -%>
  use_backend guacamole_servers_ssl if guacamole_path
  <% end -%>
  
  default_backend labview_servers_ssl

<% end -%>
